# This File is automatically synchronized from https://github.com/Glatzel/template

# git-cliff ~ default configuration file
# https://git-cliff.org/docs/configuration
#
# Lines starting with "#" are comments.
# Configuration options are organized into tables and keys.
# See documentation for more information on available options.
[changelog]
# template for the changelog header
header = """
# Changelog

All notable changes to this project will be documented in this file.

The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),
and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).

"""
# template for the changelog body
# https://keats.github.io/tera/docs/#introduction
body = """
{% macro remote_url() %}\
  https://github.com/{{ remote.github.owner }}/{{ remote.github.repo }}\
{% endmacro %}\
{% if version %}\
    ## [{{ version | trim_start_matches(pat="v") }}] - {{ timestamp | date(format="%Y-%m-%d") }}
{% else %}\
    ## [Unreleased]
{% endif %}
{% for group, commits in commits | group_by(attribute="group") %}\
    ### {{ group | upper_first }}

     {% for commit in commits %}\
        {% if commit.scope %}\
            - **({{commit.scope}})** {{ commit.message | split(pat="\n") | first | upper_first | trim }}\
            {% if commit.remote.username %} by @{{ commit.remote.username }}{% endif %}\
            {% if commit.remote.pr_number %} in \
            [#{{ commit.remote.pr_number }}]({{ self::remote_url() }}/pull/{{ commit.remote.pr_number }})\
            {% endif %}\
        {% else %}\
            - {{ commit.message | split(pat="\n") | first | upper_first | trim }}\
            {% if commit.remote.username %} by @{{ commit.remote.username }}{% endif %}\
            {% if commit.remote.pr_number %} in \
            [#{{ commit.remote.pr_number }}]({{ self::remote_url() }}/pull/{{ commit.remote.pr_number }})\
            {% endif %}\
        {% endif %}
    {% endfor %}
{% endfor %}
"""
# template for the changelog footer
footer = """
{% macro remote_url() -%}
  https://github.com/{{ remote.github.owner }}/{{ remote.github.repo }}
{%- endmacro -%}
{% for release in releases -%}
    {% if release.version -%}
        {% if release.previous.version -%}
            [{{ release.version | trim_start_matches(pat="v") }}]: \
                {{ self::remote_url() }}/compare/{{ release.previous.version }}..{{ release.version }}
        {% endif -%}
    {% else -%}
        [unreleased]: {{ self::remote_url() }}/compare/{{ release.previous.version }}..HEAD
    {% endif -%}
{% endfor %}
<!-- generated by git-cliff -->
"""
# remove the leading and trailing s
trim = true
# postprocessors
postprocessors = [
  # { pattern = '<REPO>', replace = "https://github.com/orhun/git-cliff" }, # replace repository URL
]
# render body even when there are no releases to process
# render_always = true
# output file path
# output = "test.md"

[git]
# parse the commits based on https://www.conventionalcommits.org
conventional_commits = true
# filter out the commits that are not conventional
filter_unconventional = true
# process each line of a commit as an individual commit
split_commits = false
# regex for preprocessing the commit messages
commit_preprocessors = [
  # remove issue numbers from commits
  { pattern = '\((\w+\s)?#([0-9]+)\)', replace = "" },
]
# regex for parsing and grouping commits
commit_parsers = [
  { message = "^fix", group = "Fixed" },
  { message = "^docs", group = "Documentation" },
  { message = "^style", skip = true },
  { message = "^refactor", group = "Refactor" },
  { message = "^perf", group = "Performance" },
  { message = "^test", group = "Testing" },
  { message = "^revert", group = "Revert" },
  { message = "^.*: add", group = "Added" },
  { message = "^.*: support", group = "Added" },
  { message = "^.*: initial", group = "Added" },
  { message = "^.*: remove", group = "Removed" },
  { message = "^.*: delete", group = "Removed" },
  { message = "^build", skip = true },
  { message = "^ci", skip = true },
  { message = "^chore", skip = true },
  { message = "^.*:", group = "Changed" },
]
# filter out the commits that are not matched by commit parsers
filter_commits = false
# sort the tags topologically
topo_order = false
# sort the commits inside sections by oldest/newest order
sort_commits = "oldest"
# A regular expression for matching the git tags.
tag_pattern = '^v\d+\.\d+\.\d+$'
# A regex for ignore processing the matched tags.
# ignore_tags include ignored commits into the next tag.
# ignore_tags = '^v\d+\.\d+\.\d+-\S+$'
